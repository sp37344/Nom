import React from 'react';
import {
  Button,
  ScrollView,
  View,
  StyleSheet,
  Text,
  TextInput,
  Platform,
  AppRegistry
} from 'react-native';
import { SearchBar } from 'react-native-elements';
import { ExpoLinksView } from '@expo/samples';
import { Ionicons } from '@expo/vector-icons';
import styles from '../styles';
import App from '../App.js';
import * as firebase from 'firebase';

export default class UserViewPostScreen extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      dish: 'Dish Name',
      details: 'List description of dish',
      ingredients: '',
      dietaryRestrictions: '',
      quantity: 'Quantity',
    };
  }

  static navigationOptions = {
    title: 'View Post',
  };

  async addOrder(quantity) {
    const { navigate } = this.props.navigation;
    const { navigation } = this.props;
    const item = navigation.getParam('item', "Bread");
    const price = navigation.getParam('price', "3.00");
    const description = navigation.getParam('description', "Delicious freshly baked");
    const dietaryRestrictions = navigation.getParam('dietaryRestrictions', "None");
    // const quantity = navigation.getParam('quantity', "4");
    const restaurant = navigation.getParam('restaurant', "Panera");
    const expirationDate = navigation.getParam('expirationDate', "9:00PM today")
    const datePosted = navigation.getParam('datePosted', "2:45PM today")
    var user = firebase.auth().currentUser;
    var email = user.email;
    var total = price * quantity;
    var currentTime = new Date();
    var orderTime = currentTime.valueOf();
    var userOrderQuery = firebase.database().ref('activeOrders/').orderByChild("userEmail").equalTo(email).limitToFirst(1);
    console.log('going through query')
    var alreadyHasActiveOrder = false;
    userOrderQuery.once("value", async function(orderSnapshot) {
      if (orderSnapshot.exists()) {
        alreadyHasActiveOrder = true;
        var snapshotRef = orderSnapshot.ref;

        console.log("order Snapshot: ", orderSnapshot);
        console.log('user already has active order');

        var isInOrder = false;
        var foodItemsOld = orderSnapshot.child("foodItems");

        // console.log('OLD FOOD ITEMS REFERENCE: ');
        // console.log(foodItemsOld);

        // var foodItemsQuery = orderSnapshot.ref.child("foodItems").orderByChild("item").equalTo(item).limitToFirst(1);
        // console.log("created foodItemsQuery: ", foodItemsQuery);
        // var containsItem = false;
        // await foodItemsQuery.on("value", async function (foodSnapshot) {
        //   // the food item already exists in the cart, so update the quantity
        //   console.log("food item already exists in user order");
        //   console.log(foodSnapshot.val());
        //   containsItem = true;
        //   this.props.navigation.navigate('UserPost');
        //   return;
        // })


        var oldTotal = orderSnapshot.child("total").val();
        console.log("oldTotal ", oldTotal);

        await foodItemsOld.push({
          item: item,
          price: price,
          description: description,
          quantity: quantity,
          subtotal: total,
          dietaryRestrictions: dietaryRestrictions,
          datePosted: datePosted,
          expirationDate: expirationDate
        })

        console.log('AFTER PUSHING TO OLD FOOD ITEMS');
        console.log(foodItemsOld);

        var newTotal = oldTotal + total;
        console.log(newTotal);


        console.log("snapshotRef", snapshotRef);
        await snapshotRef.update({
          orderTime: orderTime,
          total: newTotal
        });
        console.log("all done yay");

          this.props.navigation.navigate('UserPost');
          return;
      }
      else {
        console.log("order does not exist")
      }
    })
    if (!alreadyHasActiveOrder) {
      // case where user does not have an existing active order in the database
      console.log("adding user order")

      activeOrdersRef = firebase.database().ref('activeOrders/');
      console.log(activeOrdersRef);
      var newOrder = activeOrdersRef.push();
      var foodItems = {};
      await newOrder.update({
        userEmail: email,
        restaurant,
        orderTime,
        foodItems
      })

      console.log("brand newOrder: ", newOrder);

      this.props.navigation.navigate('UserPost');
      return;
    }
  }

  // async addOrder() {
  //   const { navigate } = this.props.navigation;
  //   const { navigation } = this.props;
  //   const item = navigation.getParam('item', "Bread");
  //   const price = navigation.getParam('price', "3.00");
  //   const description = navigation.getParam('description', "Delicious freshly baked");
  //   const dietaryRestrictions = navigation.getParam('dietaryRestrictions', "None");
  //   const quantity = navigation.getParam('quantity', "4");
  //   const restaurant = navigation.getParam('restaurant', "Panera");
  //   const expirationDate = navigation.getParam('expirationDate', "9:00PM today");
  //   const datePosted = navigation.getParam('datePosted', "2:45PM today");
  //   const oldQuantity = navigation.getParam('oldQuantity', '1');
  //   const oldSubtotal = navigation.getParam('oldSubtotal', '1');
  //   var user = firebase.auth().currentUser;
  //   var email = user.email;
  //   var total = price * quantity;
  //   var currentTime = new Date();
  //   var orderTime = currentTime.valueOf();
  //   var userOrderQuery = firebase.database().ref('activeOrders/').orderByChild("userEmail").equalTo(email).limitToFirst(1);
  //   console.log('going through query')
  //   var alreadyHasActiveOrder = false;
  //   await userOrderQuery.on("child_added", async function(orderSnapshot) {
  //     alreadyHasActiveOrder = true;
  //     var snapshotRef = orderSnapshot.ref;
  //
  //     console.log("order Snapshot: ", orderSnapshot);
  //     console.log('user already has active order');
  //
  //     var isInOrder = false;
  //     var foodItemsOld = orderSnapshot.ref.child("foodItems");
  //
  //     console.log('OLD FOOD ITEMS REFERENCE: ');
  //     console.log(foodItemsOld);
  //
  //     var foodItemsQuery = firebase.database().ref('activeOrders/' + snapshotKey).child("foodItems/").orderByChild("item").equalTo(item).limitToFirst(1);
  //     console.log("created foodItemsQuery: ", foodItemsQuery);
  //     await foodItemsQuery.on("value", async function (foodSnapshot) {
  //       if (foodSnapshot.exists()) {
  //         console.log(foodSnapshot);
  //         // the food item already exists in the cart, so update the quantity
  //         console.log("item IS already in cart");
  //         console.log(foodSnapshot.val());
  //
  //         // update the quantity based on what the user selects
  //         var newQuantity = quantity;
  //
  //         var oldQuantity = foodSnapshot.child("quantity").val();
  //         var oldSubtotal = foodSnapshot.child("subtotal").val();
  //         console.log("Now navigating to the VIEW POST IN CART page");
  //         navigate('UserViewPostInCart', {
  //           item,
  //           price,
  //           description,
  //           dietaryRestrictions,
  //           quantity,
  //           restaurant,
  //           expirationDate,
  //           datePosted,
  //           oldQuantity,
  //           oldSubtotal
  //         });
  //         return;
  //       }
  //       else {
  //         console.log("ERROR: should never reach this state");
  //       }
  //     });
  //
  //     // var foodItemsQuery = orderSnapshot.ref.child("foodItems").orderByChild("item").equalTo(item).limitToFirst(1);
  //     // console.log("created foodItemsQuery: ", foodItemsQuery);
  //     // var containsItem = false;
  //     // await foodItemsQuery.on("value", async function (foodSnapshot) {
  //     //   // the food item already exists in the cart, so update the quantity
  //     //   console.log("food item already exists in user order");
  //     //   console.log(foodSnapshot.val());
  //     //   containsItem = true;
  //     //   this.props.navigation.navigate('UserPost');
  //     //   return;
  //     // })
  //
  //
  //     var oldTotal = orderSnapshot.child("total").val();
  //     console.log("oldTotal ", oldTotal);
  //
  //     await foodItemsOld.push({
  //       item: item,
  //       price: price,
  //       description: description,
  //       quantity: quantity,
  //       subtotal: total,
  //       dietaryRestrictions: dietaryRestrictions,
  //       datePosted: datePosted,
  //       expirationDate: expirationDate
  //     })
  //
  //     console.log('AFTER PUSHING TO OLD FOOD ITEMS');
  //     console.log(foodItemsOld);
  //
  //     var newTotal = oldTotal + total;
  //     console.log(newTotal);
  //
  //
  //     console.log("snapshotRef", snapshotRef);
  //     await snapshotRef.update({
  //       orderTime: orderTime,
  //       total: newTotal
  //     });
  //     console.log("all done yay");
  //
  //       this.props.navigation.navigate('UserPost');
  //       return;
  //     })
  //   if (!alreadyHasActiveOrder) {
  //     // case where user does not have an existing active order in the database
  //     console.log("ERROR: should never reach this state")
  //     return;
  //   }
  // }

  // async addOrder(quantity) {
  //   const { navigate } = this.props.navigation;
  //   const { navigation } = this.props;
  //   const item = navigation.getParam('item', "Bread");
  //   const price = navigation.getParam('price', "3.00");
  //   const description = navigation.getParam('description', "Delicious freshly baked");
  //   const dietaryRestrictions = navigation.getParam('dietaryRestrictions', "None");
  //   // const quantity = this.state.quantity;
  //   const restaurant = navigation.getParam('restaurant', "Panera");
  //   const expirationDate = navigation.getParam('expirationDate', "9:00PM today")
  //   const datePosted = navigation.getParam('datePosted', "2:45PM today")
  //   var user = firebase.auth().currentUser;
  //   var email = user.email;
  //   var total = price * quantity;
  //   var currentTime = new Date();
  //   var orderTime = currentTime.valueOf();
  //   var userOrderQuery = firebase.database().ref('activeOrders/').orderByChild("userEmail").equalTo(email).limitToFirst(1);
  //   console.log('going through query')
  //   var alreadyHasActiveOrder = false;
  //   await userOrderQuery.on("value", async function(orderSnapshot) {
  //     console.log('user already has active order');
  //     alreadyHasActiveOrder = true;
  //     var snapshotRef = orderSnapshot.key;
  //     console.log("snapshotRef", snapshotKey);
  //     console.log("order Snapshot: ", orderSnapshot);
  //
  //
  //     var isInOrder = false;
  //     var foodItemsOld = firebase.database().ref('activeOrders/' + snapshotKey).child("foodItems");
  //     //var foodItemsOld = orderSnapshot.ref.child("foodItems");
  //
  //     console.log('OLD FOOD ITEMS REFERENCE: ');
  //     console.log(foodItemsOld);
  //
  //     // var foodItemsQuery = orderSnapshot.ref.child("foodItems").orderByChild("item").equalTo(item).limitToFirst(1);
  //     // console.log("created foodItemsQuery: ", foodItemsQuery);
  //     // var containsItem = false;
  //     // await foodItemsQuery.on("value", async function (foodSnapshot) {
  //     //   // the food item already exists in the cart, so update the quantity
  //     //   console.log("food item already exists in user order");
  //     //   console.log(foodSnapshot.val());
  //     //   containsItem = true;
  //     //   this.props.navigation.navigate('UserPost');
  //     //   return;
  //     // })
  //
  //     var oldTotal = orderSnapshot.child("total").val();
  //     console.log("oldTotal ", oldTotal);
  //
  //     await foodItemsOld.push({
  //       item: item,
  //       price: price,
  //       description: description,
  //       quantity: quantity,
  //       subtotal: total,
  //       dietaryRestrictions: dietaryRestrictions,
  //       datePosted: datePosted,
  //       expirationDate: expirationDate
  //     })
  //
  //     console.log('AFTER PUSHING TO OLD FOOD ITEMS');
  //     console.log(foodItemsOld);
  //
  //     var newTotal = oldTotal + total;
  //     console.log(newTotal);
  //
  //
  //     console.log("snapshotRef", snapshotRef);
  //     await firebase.database().ref('activeOrders/' + snapshotKey).update({
  //     // await snapshotRef.update({
  //       orderTime: orderTime,
  //       total: newTotal,
  //       userEmail: email,
  //       restaurant
  //     });
  //     console.log("all done yay");
  //
  //       this.props.navigation.navigate('UserPost');
  //       return;
  //     })
  //   if (!alreadyHasActiveOrder) {
  //     // case where user does not have an existing active order in the database
  //     console.log("adding user order")
  //
  //     activeOrdersRef = firebase.database().ref('activeOrders/');
  //     console.log(activeOrdersRef);
  //     var newOrder = activeOrdersRef.push().key;
  //     var foodItems = {};
  //     await newOrder.update({
  //       userEmail: email,
  //       restaurant,
  //       orderTime,
  //       foodItems
  //     })
  //
  //     console.log("brand newOrder: ", newOrder);
  //
  //     this.props.navigation.navigate('UserPost');
  //     return;
  //   }
  //   // userOrderQuery.on("value", async function(orderSnapshot) {
  //   //   if (orderSnapshot.exists()) {
  //   //     var snapshotKey = orderSnapshot.key;
  //   //
  //   //     console.log("snapshotKey", snapshotKey);
  //   //     console.log("order Snapshot: ", orderSnapshot);
  //   //     console.log('user already has active order');
  //   //
  //   //     var foodItemsOld = firebase.database().ref('activeOrders/' + snapshotKey).child("foodItems");
  //   //     // var foodItemsOld = orderSnapshot.ref.child("foodItems");
  //   //
  //   //     console.log('OLD FOOD ITEMS REFERENCE: ');
  //   //     console.log(foodItemsOld);
  //   //
  //   //     var oldTotal = orderSnapshot.child("total").val();
  //   //     console.log("oldTotal ", oldTotal);
  //   //
  //   //     await foodItemsOld.push({
  //   //       item: item,
  //   //       price: price,
  //   //       description: description,
  //   //       quantity: quantity,
  //   //       subtotal: total,
  //   //       dietaryRestrictions: dietaryRestrictions,
  //   //       datePosted: datePosted,
  //   //       expirationDate: expirationDate
  //   //     })
  //   //
  //   //     console.log('AFTER PUSHING TO OLD FOOD ITEMS');
  //   //     console.log(foodItemsOld);
  //   //
  //   //     var newTotal = oldTotal + total;
  //   //     console.log(newTotal);
  //   //
  //   //
  //   //     console.log("snapshotKey", snapshotKey);
  //   //     await firebase.database().ref('activeOrders/' + snapshotKey).update({
  //   //       orderTime: orderTime,
  //   //       total: newTotal
  //   //     });
  //   //     console.log("all done yay");
  //   //
  //   //     this.props.navigation.navigate('UserPost');
  //   //     return;
  //   //   }
  //   //   else {
  //   //     console.log("adding user order")
  //   //
  //   //     activeOrdersRef = firebase.database().ref('activeOrders/');
  //   //     console.log(activeOrdersRef);
  //   //     var newOrder = activeOrdersRef.push();
  //   //     var foodItems = {};
  //   //     await newOrder.update({
  //   //       userEmail: email,
  //   //       restaurant,
  //   //       orderTime,
  //   //       total,
  //   //       foodItems
  //   //     })
  //   //
  //   //     var newFoodItem = activeOrdersRef.child("foodItems").push().key;
  //   //
  //   //     await newFoodItem.push({
  //   //       item: item,
  //   //       price: price,
  //   //       description: description,
  //   //       quantity: quantity,
  //   //       subtotal: total,
  //   //       dietaryRestrictions: dietaryRestrictions,
  //   //       datePosted: datePosted,
  //   //       expirationDate: expirationDate
  //   //     })
  //   //
  //   //     console.log("brand newOrder: ", newOrder);
  //   //
  //   //     this.props.navigation.navigate('UserPost');
  //   //     return;
  //   //   }
  //   // });
  // }




  render() {
    const { navigate } = this.props.navigation;
    const { navigation } = this.props;
    const item = navigation.getParam('item', "Bread");
    const price = navigation.getParam('price', "3.00");
    const description = navigation.getParam('description', "Delicious freshly baked");
    const dietaryRestrictions = navigation.getParam('dietaryRestrictions', "None");
    const quantity = navigation.getParam('quantity', "4");
    const restaurant = navigation.getParam('restaurant', "Panera");
    const expirationDate = navigation.getParam('expirationDate', "9:00PM today")
    const postedDate = navigation.getParam('postedDate', "2:45PM today")

    return (
      <ScrollView style={styles.container}>
      <View>
        <Text style={styles.label}>
          {JSON.stringify(item)}
          ${JSON.stringify(price)}
          {JSON.stringify(description)}
          {JSON.stringify(dietaryRestrictions)}
          {JSON.stringify(quantity)}
          {JSON.stringify(restaurant)}
          {JSON.stringify(postedDate)}
        </Text>
        <View
          style={{
            borderBottomColor: 'black',
            borderBottomWidth: 1,
          }}
        />
        <View style={styles.inputContainer}>
          <Text style={styles.label}> Quantity: </Text>
          <TextInput
            onFocus={() => this.setState({quantity: ''})}
            onChangeText={(text) => this.setState({quantity: text})}
            style={styles.input}
            keyboardType='numeric'
            value={this.state.quantity}
          />
        </View>
      </View>
      <View style={styles.newPostContainer}>
        <Text onPress={() => navigate("RestaurantNewPost")} style={styles.newPostText}> Add to cart </Text>
        <Ionicons
          name={Platform.OS === "ios" ? "ios-add-circle" : "md-add-circle"}
          color="gray"
          size={22}
          onPress={() =>
            this.addOrder(this.state.quantity)
          }
        />
      </View>
      </ScrollView>
    );
  }
}
